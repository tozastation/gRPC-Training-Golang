// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tozastation/gRPC-Training-Golang/domain/repository (interfaces: IWeatherRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	remote "github.com/tozastation/go-grpc-ddd-example/infrastructure/persistence/model/remote"
	reflect "reflect"
)

// MockIWeatherRepository is a mock of IWeatherRepository interface
type MockIWeatherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWeatherRepositoryMockRecorder
}

// MockIWeatherRepositoryMockRecorder is the mock recorder for MockIWeatherRepository
type MockIWeatherRepositoryMockRecorder struct {
	mock *MockIWeatherRepository
}

// NewMockIWeatherRepository creates a new mock instance
func NewMockIWeatherRepository(ctrl *gomock.Controller) *MockIWeatherRepository {
	mock := &MockIWeatherRepository{ctrl: ctrl}
	mock.recorder = &MockIWeatherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWeatherRepository) EXPECT() *MockIWeatherRepositoryMockRecorder {
	return m.recorder
}

// FindCurrentWeatherByCityName mocks base method
func (m *MockIWeatherRepository) FindCurrentWeatherByCityName(arg0 context.Context, arg1 string) (*remote.OpenWeather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCurrentWeatherByCityName", arg0, arg1)
	ret0, _ := ret[0].(*remote.OpenWeather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCurrentWeatherByCityName indicates an expected call of FindCurrentWeatherByCityName
func (mr *MockIWeatherRepositoryMockRecorder) FindCurrentWeatherByCityName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCurrentWeatherByCityName", reflect.TypeOf((*MockIWeatherRepository)(nil).FindCurrentWeatherByCityName), arg0, arg1)
}
