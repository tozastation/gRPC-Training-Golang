// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tozastation/gRPC-Training-Golang/interfaces/rpc/weather (interfaces: WeathersClient)

// Package mock_weather is a generated GoMock package.
package mock_weather

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	weather "github.com/tozastation/gRPC-Training-Golang/interfaces/rpc/weather"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockWeathersClient is a mock of WeathersClient interface
type MockWeathersClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeathersClientMockRecorder
}

// MockWeathersClientMockRecorder is the mock recorder for MockWeathersClient
type MockWeathersClientMockRecorder struct {
	mock *MockWeathersClient
}

// NewMockWeathersClient creates a new mock instance
func NewMockWeathersClient(ctrl *gomock.Controller) *MockWeathersClient {
	mock := &MockWeathersClient{ctrl: ctrl}
	mock.recorder = &MockWeathersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeathersClient) EXPECT() *MockWeathersClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockWeathersClient) Get(arg0 context.Context, arg1 *weather.GetRequest, arg2 ...grpc.CallOption) (*weather.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*weather.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockWeathersClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWeathersClient)(nil).Get), varargs...)
}
