// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tozastation/gRPC-Training-Golang/implements (interfaces: IWeatherImplement)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	weather "github.com/tozastation/gRPC-Training-Golang/interfaces/rpc/weather"
	reflect "reflect"
)

// MockIWeatherImplement is a mock of IWeatherImplement interface
type MockIWeatherImplement struct {
	ctrl     *gomock.Controller
	recorder *MockIWeatherImplementMockRecorder
}

// MockIWeatherImplementMockRecorder is the mock recorder for MockIWeatherImplement
type MockIWeatherImplementMockRecorder struct {
	mock *MockIWeatherImplement
}

// NewMockIWeatherImplement creates a new mock instance
func NewMockIWeatherImplement(ctrl *gomock.Controller) *MockIWeatherImplement {
	mock := &MockIWeatherImplement{ctrl: ctrl}
	mock.recorder = &MockIWeatherImplementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWeatherImplement) EXPECT() *MockIWeatherImplementMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockIWeatherImplement) Get(arg0 context.Context, arg1 *weather.GetRequest) (*weather.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*weather.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIWeatherImplementMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIWeatherImplement)(nil).Get), arg0, arg1)
}
