// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tozastation/gRPC-Training-Golang/implements (interfaces: IUserImplement)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	user "github.com/tozastation/go-grpc-ddd-example/interfaces/rpc/user"
	reflect "reflect"
)

// MockIUserImplement is a mock of IUserImplement interface
type MockIUserImplement struct {
	ctrl     *gomock.Controller
	recorder *MockIUserImplementMockRecorder
}

// MockIUserImplementMockRecorder is the mock recorder for MockIUserImplement
type MockIUserImplementMockRecorder struct {
	mock *MockIUserImplement
}

// NewMockIUserImplement creates a new mock instance
func NewMockIUserImplement(ctrl *gomock.Controller) *MockIUserImplement {
	mock := &MockIUserImplement{ctrl: ctrl}
	mock.recorder = &MockIUserImplementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserImplement) EXPECT() *MockIUserImplementMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockIUserImplement) Get(arg0 context.Context, arg1 *user.GetRequest) (*user.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*user.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIUserImplementMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserImplement)(nil).Get), arg0, arg1)
}

// Login mocks base method
func (m *MockIUserImplement) Login(arg0 context.Context, arg1 *user.LoginRequest) (*user.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*user.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockIUserImplementMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserImplement)(nil).Login), arg0, arg1)
}

// Post mocks base method
func (m *MockIUserImplement) Post(arg0 context.Context, arg1 *user.PostRequest) (*user.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", arg0, arg1)
	ret0, _ := ret[0].(*user.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockIUserImplementMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIUserImplement)(nil).Post), arg0, arg1)
}
